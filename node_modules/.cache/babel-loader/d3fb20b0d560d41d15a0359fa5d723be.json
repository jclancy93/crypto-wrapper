{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { ethers } from 'ethers';\nimport { useCallback, useEffect } from 'react';\nimport { useNxmContract } from './useContract';\nimport { useActiveWeb3React } from './index';\nimport { NETWORK_WNXM_CONTRACT_ADDRESS, NXM_TOKEN_DECIMALS } from '../constants';\nconst {\n  BigNumber\n} = ethers;\n\nconst useNxm = () => {\n  _s();\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const nxmContract = useNxmContract();\n  const [allowance, setAllowance] = useState(BigNumber.from(0));\n  const [balance, setBalance] = useState({\n    rawBalance: BigNumber.from(0),\n    parsedBalance: 0,\n    truncatedBalance: 0\n  });\n  const [isWhitelisted, setWhitelisted] = useState(false);\n  const fetchAllowance = useCallback(async () => {\n    if (account) {\n      try {\n        const allowance = await (nxmContract === null || nxmContract === void 0 ? void 0 : nxmContract.allowance(account, NETWORK_WNXM_CONTRACT_ADDRESS[chainId]));\n        setAllowance(BigNumber.from(allowance));\n      } catch (err) {\n        setAllowance(BigNumber.from(0));\n      }\n    }\n  }, [account, nxmContract]);\n  const fetchWhitelisted = useCallback(async () => {\n    if (account) {\n      try {\n        const whitelisted = await nxmContract.whiteListed(account);\n        setWhitelisted(whitelisted);\n      } catch (err) {\n        setWhitelisted(false);\n      }\n    }\n  });\n  const fetchBalance = useCallback(async () => {\n    if (account) {\n      try {\n        const balance = await nxmContract.balanceOf(address);\n        setBalance({\n          rawBalance: balance,\n          parsedBalance: balance.div(10 ** NXM_TOKEN_DECIMALS).toString(),\n          truncatedBalance: balance.div(10 ** NXM_TOKEN_DECIMALS).toFixed(6)\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  });\n  useEffect(() => {\n    if (account && nxmContract) {\n      fetchAllowance();\n      fetchWhitelisted();\n    }\n\n    const refreshInterval = setInterval(fetchAllowance, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, nxmContract, fetchAllowance]);\n  const approve = useCallback(async () => {\n    try {\n      const tx = await nxmContract.approve(NETWORK_WNXM_CONTRACT_ADDRESS[chainId], ethers.constants.MaxUint256.toString());\n      return tx;\n    } catch (err) {\n      return err;\n    }\n  });\n  return {\n    allowance,\n    isWhitelisted,\n    approve\n  };\n};\n\n_s(useNxm, \"2C66ZNkuXOXZvpQTidP702OSXXg=\", false, function () {\n  return [useActiveWeb3React, useNxmContract];\n});","map":{"version":3,"sources":["/Users/jackclancy/Desktop/apps/nexus-wrapper/packages/react-app/src/hooks/useNxm.js"],"names":["ethers","useCallback","useEffect","useNxmContract","useActiveWeb3React","NETWORK_WNXM_CONTRACT_ADDRESS","NXM_TOKEN_DECIMALS","BigNumber","useNxm","account","chainId","nxmContract","allowance","setAllowance","useState","from","balance","setBalance","rawBalance","parsedBalance","truncatedBalance","isWhitelisted","setWhitelisted","fetchAllowance","err","fetchWhitelisted","whitelisted","whiteListed","fetchBalance","balanceOf","address","div","toString","toFixed","refreshInterval","setInterval","clearInterval","approve","tx","constants","MaxUint256"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\nimport { useCallback, useEffect } from 'react'\nimport { useNxmContract } from './useContract'\nimport { useActiveWeb3React } from './index'\nimport { \n  NETWORK_WNXM_CONTRACT_ADDRESS,\n  NXM_TOKEN_DECIMALS\n} from '../constants'\n\nconst { BigNumber } = ethers\n\nconst useNxm = () => {\n  const { account, chainId } = useActiveWeb3React()\n  const nxmContract = useNxmContract()\n\n  const [allowance, setAllowance] = useState(BigNumber.from(0))\n  const [balance, setBalance] = useState({ \n    rawBalance: BigNumber.from(0),\n    parsedBalance: 0,\n    truncatedBalance: 0,\n   })\n  const [isWhitelisted, setWhitelisted] = useState(false)\n\n  const fetchAllowance = useCallback(async () => {\n    if (account) {\n      try {\n        const allowance = await nxmContract?.allowance(\n          account,\n          NETWORK_WNXM_CONTRACT_ADDRESS[chainId]\n        )\n        setAllowance(BigNumber.from(allowance))\n      } catch(err) {\n        setAllowance(BigNumber.from(0))\n      }\n    }\n  }, [account, nxmContract])\n\n  const fetchWhitelisted = useCallback(async () => {\n    if (account) {\n      try {\n        const whitelisted = await nxmContract.whiteListed(account)\n        setWhitelisted(whitelisted)\n      } catch(err) {\n        setWhitelisted(false)\n      }\n    }\n  })\n\n  const fetchBalance = useCallback(async () => {\n    if (account) {\n      try {\n        const balance = await nxmContract.balanceOf(address)\n        setBalance({\n          rawBalance: balance,\n          parsedBalance: balance.div(10 ** NXM_TOKEN_DECIMALS).toString(),\n          truncatedBalance: balance.div(10 ** NXM_TOKEN_DECIMALS).toFixed(6),\n        })\n      } catch (err) {\n        return err\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (account && nxmContract) {\n      fetchAllowance()\n      fetchWhitelisted()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, nxmContract, fetchAllowance])\n\n  const approve = useCallback(async () => {\n    try {\n      const tx = await nxmContract.approve(\n        NETWORK_WNXM_CONTRACT_ADDRESS[chainId],\n        ethers.constants.MaxUint256.toString()\n      )\n      return tx\n    } catch (err) {\n      return err\n    }\n  })\n\n  return { allowance, isWhitelisted, approve }\n}"]},"metadata":{},"sourceType":"module"}