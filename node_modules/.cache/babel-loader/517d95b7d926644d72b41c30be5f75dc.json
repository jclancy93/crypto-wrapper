{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nimport { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { Web3Provider } from '@ethersproject/providers'; // returns the checksummed address if the address is valid, otherwise returns false\n\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\nconst ETHERSCAN_PREFIXES = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.'\n};\nexport function getEtherscanLink(chainId, data, type) {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`;\n\n  switch (type) {\n    case 'transaction':\n      {\n        return `${prefix}/tx/${data}`;\n      }\n\n    case 'token':\n      {\n        return `${prefix}/token/${data}`;\n      }\n\n    case 'block':\n      {\n        return `${prefix}/block/${data}`;\n      }\n\n    case 'address':\n    default:\n      {\n        return `${prefix}/address/${data}`;\n      }\n  }\n} // shorten the checksummed version of the input address to have 0x + 4 characters at start and end\n\nexport function shortenAddress(address, chars = 4) {\n  const parsed = isAddress(address);\n\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n} // account is not optional\n\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n} // account is optional\n\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n} // account is optional\n\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}","map":{"version":3,"sources":["/Users/jackclancy/Desktop/apps/nexus-wrapper/packages/react-app/src/utils.js"],"names":["Contract","getAddress","AddressZero","Web3Provider","isAddress","value","ETHERSCAN_PREFIXES","getEtherscanLink","chainId","data","type","prefix","shortenAddress","address","chars","parsed","Error","substring","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI"],"mappings":"AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,YAAT,QAA6B,0BAA7B,C,CAEA;;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA+C;AACpD,MAAI;AACF,WAAOJ,UAAU,CAACI,KAAD,CAAjB;AACD,GAFD,CAEE,MAAM;AACN,WAAO,KAAP;AACD;AACF;AAED,MAAMC,kBAAkB,GAAG;AACzB,KAAG,EADsB;AAEzB,KAAG,UAFsB;AAGzB,KAAG,UAHsB;AAIzB,KAAG,SAJsB;AAKzB,MAAI;AALqB,CAA3B;AAQA,OAAO,SAASC,gBAAT,CACLC,OADK,EAELC,IAFK,EAGLC,IAHK,EAIL;AACA,QAAMC,MAAM,GAAI,WAAUL,kBAAkB,CAACE,OAAD,CAAlB,IAA+BF,kBAAkB,CAAC,CAAD,CAAI,cAA/E;;AAEA,UAAQI,IAAR;AACE,SAAK,aAAL;AAAoB;AAClB,eAAQ,GAAEC,MAAO,OAAMF,IAAK,EAA5B;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,eAAQ,GAAEE,MAAO,UAASF,IAAK,EAA/B;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,eAAQ,GAAEE,MAAO,UAASF,IAAK,EAA/B;AACD;;AACD,SAAK,SAAL;AACA;AAAS;AACP,eAAQ,GAAEE,MAAO,YAAWF,IAAK,EAAjC;AACD;AAbH;AAeD,C,CAED;;AACA,OAAO,SAASG,cAAT,CAAwBC,OAAxB,EAAiCC,KAAK,GAAG,CAAzC,EAA4C;AACjD,QAAMC,MAAM,GAAGX,SAAS,CAACS,OAAD,CAAxB;;AACA,MAAI,CAACE,MAAL,EAAa;AACX,UAAMC,KAAK,CAAE,gCAA+BH,OAAQ,IAAzC,CAAX;AACD;;AACD,SAAQ,GAAEE,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoBH,KAAK,GAAG,CAA5B,CAA+B,MAAKC,MAAM,CAACE,SAAP,CAAiB,KAAKH,KAAtB,CAA6B,EAA3E;AACD,C,CAED;;AACA,OAAO,SAASI,SAAT,CAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AAC1C,SAAOD,OAAO,CAACD,SAAR,CAAkBE,OAAlB,EAA2BC,gBAA3B,EAAP;AACD,C,CAED;;AACA,OAAO,SAASC,mBAAT,CAA6BH,OAA7B,EAAsCC,OAAtC,EAA+C;AACpD,SAAOA,OAAO,GAAGF,SAAS,CAACC,OAAD,EAAUC,OAAV,CAAZ,GAAiCD,OAA/C;AACD,C,CAED;;AACA,OAAO,SAASI,WAAT,CAAqBV,OAArB,EAA8BW,GAA9B,EAAmCL,OAAnC,EAA4CC,OAA5C,EAAsD;AAC3D,MAAI,CAAChB,SAAS,CAACS,OAAD,CAAV,IAAuBA,OAAO,KAAKX,WAAvC,EAAoD;AAClD,UAAMc,KAAK,CAAE,gCAA+BH,OAAQ,IAAzC,CAAX;AACD;;AAED,SAAO,IAAIb,QAAJ,CAAaa,OAAb,EAAsBW,GAAtB,EAA2BF,mBAAmB,CAACH,OAAD,EAAUC,OAAV,CAA9C,CAAP;AACD","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { Web3Provider } from '@ethersproject/providers'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.'\n}\n\nexport function getEtherscanLink(\n  chainId,\n  data,\n  type,\n) {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address, chars = 4) {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// account is not optional\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address, ABI, library, account?) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account))\n}\n\n"]},"metadata":{},"sourceType":"module"}