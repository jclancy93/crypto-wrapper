{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { useNxmContract } from './useContract';\nimport { useActiveWeb3React } from './index';\nimport { NETWORK_WNXM_CONTRACT_ADDRESS, NXM_TOKEN_DECIMALS } from '../constants';\nconst {\n  BigNumber\n} = ethers;\nexport const useNxm = () => {\n  _s();\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const nxmContract = useNxmContract();\n  const [allowance, setAllowance] = useState(BigNumber.from(0));\n  const [balance, setBalance] = useState({\n    rawBalance: 0,\n    parsedBalance: 0.0,\n    displayBalance: '--'\n  });\n  const [isWhitelisted, setWhitelisted] = useState(false);\n  const fetchAllowance = useCallback(async () => {\n    if (account) {\n      try {\n        const allowance = await (nxmContract === null || nxmContract === void 0 ? void 0 : nxmContract.allowance(account, NETWORK_WNXM_CONTRACT_ADDRESS[chainId]));\n        console.log(allowance, 'here is allowance');\n        setAllowance(BigNumber.from(allowance));\n      } catch (err) {\n        setAllowance(BigNumber.from(0));\n      }\n    }\n  }, [account, nxmContract]);\n  const fetchWhitelisted = useCallback(async () => {\n    if (account) {\n      try {\n        const whitelisted = await nxmContract.whiteListed(account);\n        setWhitelisted(whitelisted);\n      } catch (err) {\n        setWhitelisted(false);\n      }\n    }\n  });\n  const fetchBalance = useCallback(async () => {\n    if (account) {\n      try {\n        const balance = await nxmContract.balanceOf(account);\n        console.log(balance, 'here is balance', +ethers.utils.formatUnits(balance));\n        setBalance({\n          rawBalance: balance,\n          parsedBalance: ethers.utils.formatUnits(balance),\n          truncatedBalance: (+ethers.utils.formatUnits(balance)).toFixed(6)\n        });\n      } catch (err) {\n        console.log('balance called failed with err', err);\n        setBalance({\n          rawBalance: 0,\n          parsedBalance: 0.0,\n          displayBalance: '--'\n        });\n      }\n    }\n  });\n  useEffect(() => {\n    if (account && nxmContract) {\n      fetchAllowance();\n      fetchWhitelisted();\n      fetchBalance();\n    }\n\n    const refreshInterval = setInterval(fetchAllowance, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, nxmContract, fetchAllowance]);\n  const approve = useCallback(async () => {\n    try {\n      const tx = await nxmContract.approve(NETWORK_WNXM_CONTRACT_ADDRESS[chainId], ethers.constants.MaxUint256.toString());\n      return tx;\n    } catch (err) {\n      return err;\n    }\n  });\n  return {\n    allowance,\n    balance,\n    isWhitelisted,\n    approve\n  };\n};\n\n_s(useNxm, \"AZ8TS02qNVvNpcQzVQ2qLUUNGLc=\", false, function () {\n  return [useActiveWeb3React, useNxmContract];\n});","map":{"version":3,"sources":["/Users/jackclancy/Desktop/apps/nexus-wrapper/packages/react-app/src/hooks/useNxm.js"],"names":["useCallback","useEffect","useState","ethers","useNxmContract","useActiveWeb3React","NETWORK_WNXM_CONTRACT_ADDRESS","NXM_TOKEN_DECIMALS","BigNumber","useNxm","account","chainId","nxmContract","allowance","setAllowance","from","balance","setBalance","rawBalance","parsedBalance","displayBalance","isWhitelisted","setWhitelisted","fetchAllowance","console","log","err","fetchWhitelisted","whitelisted","whiteListed","fetchBalance","balanceOf","utils","formatUnits","truncatedBalance","toFixed","refreshInterval","setInterval","clearInterval","approve","tx","constants","MaxUint256","toString"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useNxmContract } from './useContract'\nimport { useActiveWeb3React } from './index'\nimport { \n  NETWORK_WNXM_CONTRACT_ADDRESS,\n  NXM_TOKEN_DECIMALS\n} from '../constants'\n\nconst { BigNumber } = ethers\n\nexport const useNxm = () => {\n  const { account, chainId } = useActiveWeb3React()\n  const nxmContract = useNxmContract()\n\n  const [allowance, setAllowance] = useState(BigNumber.from(0))\n  const [balance, setBalance] = useState({ \n    rawBalance: 0,\n    parsedBalance: 0.0,\n    displayBalance: '--',\n   })\n  const [isWhitelisted, setWhitelisted] = useState(false)\n\n  const fetchAllowance = useCallback(async () => {\n    if (account) {\n      try {\n        const allowance = await nxmContract?.allowance(\n          account,\n          NETWORK_WNXM_CONTRACT_ADDRESS[chainId]\n        )\n        console.log(allowance, 'here is allowance')\n        setAllowance(BigNumber.from(allowance))\n      } catch(err) {\n        setAllowance(BigNumber.from(0))\n      }\n    }\n  }, [account, nxmContract])\n\n  const fetchWhitelisted = useCallback(async () => {\n    if (account) {\n      try {\n        const whitelisted = await nxmContract.whiteListed(account)\n        setWhitelisted(whitelisted)\n      } catch(err) {\n        setWhitelisted(false)\n      }\n    }\n  })\n\n  const fetchBalance = useCallback(async () => {\n    if (account) {\n      try {\n        const balance = await nxmContract.balanceOf(account)\n        console.log(balance, 'here is balance', +ethers.utils.formatUnits(balance))\n        setBalance({\n          rawBalance: balance,\n          parsedBalance: ethers.utils.formatUnits(balance),\n          truncatedBalance: (+ethers.utils.formatUnits(balance)).toFixed(6),\n        })\n      } catch (err) {\n        console.log('balance called failed with err', err)\n        setBalance({\n          rawBalance: 0,\n          parsedBalance: 0.0,\n          displayBalance: '--',\n        })\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (account && nxmContract) {\n      fetchAllowance()\n      fetchWhitelisted()\n      fetchBalance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, nxmContract, fetchAllowance])\n\n  const approve = useCallback(async () => {\n    try {\n      const tx = await nxmContract.approve(\n        NETWORK_WNXM_CONTRACT_ADDRESS[chainId],\n        ethers.constants.MaxUint256.toString()\n      )\n      return tx\n    } catch (err) {\n      return err\n    }\n  })\n\n  return { allowance, balance, isWhitelisted, approve }\n}"]},"metadata":{},"sourceType":"module"}