{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Web3Provider } from '@ethersproject/providers';\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { injected } from '../connectors';\nimport { NetworkContextName } from '../constants';\nexport function useActiveWeb3React() {\n  _s();\n\n  const context = useWeb3ReactCore();\n  const contextNetwork = useWeb3ReactCore(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\n\n_s(useActiveWeb3React, \"WFPFKE/y5H/nwl1Zbqr6M/3MM8c=\", false, function () {\n  return [useWeb3ReactCore, useWeb3ReactCore];\n});\n\nexport function useEagerConnect() {\n  _s2();\n\n  const {\n    activate,\n    active\n  } = useWeb3ReactCore();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]);\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n\n_s2(useEagerConnect, \"Bhmb87TsYv+f2WbPhdXmj7sGsFM=\", false, function () {\n  return [useWeb3ReactCore];\n});","map":{"version":3,"sources":["/Users/jackclancy/Desktop/apps/nexus-wrapper/packages/react-app/src/hooks/index.js"],"names":["useState","useEffect","Web3Provider","useWeb3React","useWeb3ReactCore","injected","NetworkContextName","useActiveWeb3React","context","contextNetwork","active","useEagerConnect","activate","tried","setTried","isAuthorized","then","undefined","catch","isMobile","window","ethereum"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,YAAY,IAAIC,gBAAzB,QAAiD,kBAAjD;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,kBAAT,QAAmC,cAAnC;AAEA,OAAO,SAASC,kBAAT,GAA8B;AAAA;;AACnC,QAAMC,OAAO,GAAGJ,gBAAgB,EAAhC;AACA,QAAMK,cAAc,GAAGL,gBAAgB,CAACE,kBAAD,CAAvC;AACA,SAAOE,OAAO,CAACE,MAAR,GAAiBF,OAAjB,GAA2BC,cAAlC;AACD;;GAJeF,kB;UACEH,gB,EACOA,gB;;;AAIzB,OAAO,SAASO,eAAT,GAA2B;AAAA;;AAChC,QAAM;AAAEC,IAAAA,QAAF;AAAYF,IAAAA;AAAZ,MAAuBN,gBAAgB,EAA7C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,QAAQ,CAACU,YAAT,GAAwBC,IAAxB,CAA6BD,YAAY,IAAI;AAC3C,UAAIA,YAAJ,EAAkB;AAChBH,QAAAA,QAAQ,CAACP,QAAD,EAAWY,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CJ,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACL,YAAIK,QAAQ,IAAIC,MAAM,CAACC,QAAvB,EAAiC;AAC/BT,UAAAA,QAAQ,CAACP,QAAD,EAAWY,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CJ,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,WAFD;AAGD,SAJD,MAIO;AACLA,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF;AACF,KAdD;AAeD,GAhBQ,EAgBN,CAACF,QAAD,CAhBM,CAAT;AAkBAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,MAAJ,EAAY;AACVI,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACJ,MAAD,CAJM,CAAT;AAMA,SAAOG,KAAP;AACD;;IA7BeF,e;UACeP,gB","sourcesContent":["import { useState, useEffect } from \"react\"\nimport { Web3Provider } from '@ethersproject/providers'\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\nimport { injected } from '../connectors'\nimport { NetworkContextName } from '../constants'\n\nexport function useActiveWeb3React() {\n  const context = useWeb3ReactCore()\n  const contextNetwork = useWeb3ReactCore(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore()\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      }\n    })\n  }, [activate])\n\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}"]},"metadata":{},"sourceType":"module"}