{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { useWnxmContract } from './useContract';\nimport { useActiveWeb3React } from './index';\nimport { NETWORK_WNXM_CONTRACT_ADDRESS, NXM_TOKEN_DECIMALS } from '../constants';\nconst {\n  BigNumber\n} = ethers;\nexport const useWnxm = () => {\n  _s();\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const wNxmContract = useWnxmContract();\n  const [allowance, setAllowance] = useState(BigNumber.from(0));\n  const [balance, setBalance] = useState({\n    rawBalance: '--',\n    parsedBalance: '--',\n    displayBalance: '--'\n  }); // const fetchAllowance = useCallback(async () => {\n  //   if (account) {\n  //     try {\n  //       const allowance = await wNxmContract?.allowance(\n  //         account,\n  //         NETWORK_WNXM_CONTRACT_ADDRESS[chainId]\n  //       )\n  //       setAllowance(BigNumber.from(allowance))\n  //     } catch(err) {\n  //       setAllowance(BigNumber.from(0))\n  //     }\n  //   }\n  // }, [account, nxmContract])\n\n  const fetchBalance = useCallback(async () => {\n    if (account) {\n      try {\n        const balance = await wNxmContract.balanceOf(account);\n        setBalance({\n          rawBalance: balance,\n          parsedBalance: balance.div(10 ** NXM_TOKEN_DECIMALS).toString(),\n          displayBalance: balance.div(10 ** NXM_TOKEN_DECIMALS).toFixed(6)\n        });\n      } catch (err) {\n        setBalance({\n          rawBalance: '--',\n          parsedBalance: '--',\n          displayBalance: '--'\n        });\n      }\n    }\n  });\n  useEffect(() => {\n    if (account && wNxmContract) {\n      // fetchAllowance()\n      fetchBalance();\n    }\n  }, [account, wNxmContract]);\n  const approve = useCallback(async () => {\n    try {\n      const tx = await wNxmContract.approve(NETWORK_WNXM_CONTRACT_ADDRESS[chainId], ethers.constants.MaxUint256.toString());\n      return tx;\n    } catch (err) {\n      return err;\n    }\n  });\n  return {\n    allowance,\n    balance,\n    approve\n  };\n};\n\n_s(useWnxm, \"s3kIILZLnPT4GmfycRuMkYPTjmY=\", false, function () {\n  return [useActiveWeb3React, useWnxmContract];\n});","map":{"version":3,"sources":["/Users/jackclancy/Desktop/apps/nexus-wrapper/packages/react-app/src/hooks/useWnxm.js"],"names":["useCallback","useEffect","useState","ethers","useWnxmContract","useActiveWeb3React","NETWORK_WNXM_CONTRACT_ADDRESS","NXM_TOKEN_DECIMALS","BigNumber","useWnxm","account","chainId","wNxmContract","allowance","setAllowance","from","balance","setBalance","rawBalance","parsedBalance","displayBalance","fetchBalance","balanceOf","div","toString","toFixed","err","approve","tx","constants","MaxUint256"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SACEC,6BADF,EAEEC,kBAFF,QAGO,cAHP;AAKA,MAAM;AAAEC,EAAAA;AAAF,IAAgBL,MAAtB;AAEA,OAAO,MAAMM,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBN,kBAAkB,EAA/C;AACA,QAAMO,YAAY,GAAGR,eAAe,EAApC;AAEA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAACM,SAAS,CAACO,IAAV,CAAe,CAAf,CAAD,CAA1C;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC;AACrCgB,IAAAA,UAAU,EAAE,IADyB;AAErCC,IAAAA,aAAa,EAAE,IAFsB;AAGrCC,IAAAA,cAAc,EAAE;AAHqB,GAAD,CAAtC,CAL2B,CAW3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,YAAY,GAAGrB,WAAW,CAAC,YAAY;AAC3C,QAAIU,OAAJ,EAAa;AACX,UAAI;AACF,cAAMM,OAAO,GAAG,MAAMJ,YAAY,CAACU,SAAb,CAAuBZ,OAAvB,CAAtB;AACAO,QAAAA,UAAU,CAAC;AACTC,UAAAA,UAAU,EAAEF,OADH;AAETG,UAAAA,aAAa,EAAEH,OAAO,CAACO,GAAR,CAAY,MAAMhB,kBAAlB,EAAsCiB,QAAtC,EAFN;AAGTJ,UAAAA,cAAc,EAAEJ,OAAO,CAACO,GAAR,CAAY,MAAMhB,kBAAlB,EAAsCkB,OAAtC,CAA8C,CAA9C;AAHP,SAAD,CAAV;AAKD,OAPD,CAOE,OAAOC,GAAP,EAAY;AACbT,QAAAA,UAAU,CAAC;AACdC,UAAAA,UAAU,EAAE,IADE;AAEdC,UAAAA,aAAa,EAAE,IAFD;AAGdC,UAAAA,cAAc,EAAE;AAHF,SAAD,CAAV;AAKA;AACF;AACF,GAjB+B,CAAhC;AAmBAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,OAAO,IAAIE,YAAf,EAA6B;AAC3B;AACAS,MAAAA,YAAY;AACb;AACF,GALQ,EAKN,CAACX,OAAD,EAAUE,YAAV,CALM,CAAT;AAOA,QAAMe,OAAO,GAAG3B,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,YAAM4B,EAAE,GAAG,MAAMhB,YAAY,CAACe,OAAb,CACfrB,6BAA6B,CAACK,OAAD,CADd,EAEfR,MAAM,CAAC0B,SAAP,CAAiBC,UAAjB,CAA4BN,QAA5B,EAFe,CAAjB;AAIA,aAAOI,EAAP;AACD,KAND,CAME,OAAOF,GAAP,EAAY;AACZ,aAAOA,GAAP;AACD;AACF,GAV0B,CAA3B;AAYA,SAAO;AAAEb,IAAAA,SAAF;AAAaG,IAAAA,OAAb;AAAsBW,IAAAA;AAAtB,GAAP;AACD,CAhEM;;GAAMlB,O;UACkBJ,kB,EACRD,e","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useWnxmContract } from './useContract'\nimport { useActiveWeb3React } from './index'\nimport { \n  NETWORK_WNXM_CONTRACT_ADDRESS,\n  NXM_TOKEN_DECIMALS\n} from '../constants'\n\nconst { BigNumber } = ethers\n\nexport const useWnxm = () => {\n  const { account, chainId } = useActiveWeb3React()\n  const wNxmContract = useWnxmContract()\n\n  const [allowance, setAllowance] = useState(BigNumber.from(0))\n  const [balance, setBalance] = useState({ \n    rawBalance: '--',\n    parsedBalance: '--',\n    displayBalance: '--',\n   })\n\n  // const fetchAllowance = useCallback(async () => {\n  //   if (account) {\n  //     try {\n  //       const allowance = await wNxmContract?.allowance(\n  //         account,\n  //         NETWORK_WNXM_CONTRACT_ADDRESS[chainId]\n  //       )\n  //       setAllowance(BigNumber.from(allowance))\n  //     } catch(err) {\n  //       setAllowance(BigNumber.from(0))\n  //     }\n  //   }\n  // }, [account, nxmContract])\n\n  const fetchBalance = useCallback(async () => {\n    if (account) {\n      try {\n        const balance = await wNxmContract.balanceOf(account)\n        setBalance({\n          rawBalance: balance,\n          parsedBalance: balance.div(10 ** NXM_TOKEN_DECIMALS).toString(),\n          displayBalance: balance.div(10 ** NXM_TOKEN_DECIMALS).toFixed(6),\n        })\n      } catch (err) {\n       setBalance({\n    rawBalance: '--',\n    parsedBalance: '--',\n    displayBalance: '--',\n       }) \n      }\n    }\n  })\n\n  useEffect(() => {\n    if (account && wNxmContract) {\n      // fetchAllowance()\n      fetchBalance()\n    }\n  }, [account, wNxmContract])\n\n  const approve = useCallback(async () => {\n    try {\n      const tx = await wNxmContract.approve(\n        NETWORK_WNXM_CONTRACT_ADDRESS[chainId],\n        ethers.constants.MaxUint256.toString()\n      )\n      return tx\n    } catch (err) {\n      return err\n    }\n  })\n\n  return { allowance, balance, approve }\n}"]},"metadata":{},"sourceType":"module"}